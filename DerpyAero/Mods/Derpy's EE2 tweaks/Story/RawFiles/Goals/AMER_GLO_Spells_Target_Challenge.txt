Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION

QRY QRY_AMER_Source_Infusion_SkillCast((CHARACTERGUID)_Char, "Target_Challenge", (INTEGER)_InfusCount)
AND
_InfusCount > 0
THEN
ApplyStatus(_Char, "HASTED", 12.0, 0, _Char);


QRY QRY_AMER_Source_Infusion_SkillCast_PerTarget((CHARACTERGUID)_Char, "Target_Challenge", (CHARACTERGUID)_Target, (REAL)_X, (REAL)_Y, (REAL)_Z, (INTEGER)_InfusCount)
AND
_InfusCount > 1
THEN
PROC_AMER_Source_Infusion_AddRefund(_Char, 0, 1);
PROC_AMER_GEN_ShootConeAt(_Char, _Target, "Cone_GroundSmash", "RS3_FX_Skills_Warrior_GroundSmash_Cast_01");
ApplyStatus(_Char, "DEFLECTING", 18.0, 0, _Char);


QRY QRY_AMER_Source_Infusion_SkillPreCast_PerTarget((CHARACTERGUID)_Char, "Target_Challenge", (CHARACTERGUID)_Target, (REAL)_X, (REAL)_Y, (REAL)_Z, (INTEGER)_InfusCount)
AND
_InfusCount > 2
AND
QRY_AMER_Source_Infusion_KickerCost(_Char, 2)
AND
QRY_AMER_GEN_Scaling_GetScaledValue(_Char, 0.2, 0.02, 0.0, "Ability", "WarriorLore")
AND
DB_AMER_GEN_OUTPUT_Real(_Scaling)
THEN
DB_AMER_StatusMod_BindToStatus("AMER_CHALLENGE_CASTER");	//Bind Disintegrating data to Challenge (Caster) status for caster.
PROC_AMER_StatusMod_Add_ExtendedStat(_Char, "AMER_DISINTEGRATING_PHYSICAL_CHALLENGE", "Disintegrating", "Physical", "", "", _Scaling, "Challenge_Infus_Disintegration", 0);
DB_AMER_StatusMod_BindToStatus("CHALLENGE");	//Bind Disintegrating data to Challenge status for target, allowing it to Disintegrate the caster on its turn.
PROC_AMER_StatusMod_Add_ExtendedStat(_Target, "AMER_DISINTEGRATING_PHYSICAL_CHALLENGE", "Disintegrating", "Physical", "", "", _Scaling, "Challenge_Infus_Disintegration", 0);
PROC_AMER_TempStat_StatusMod_AddExtendedStat(_Char, "CHALLENGE", "Status_OnTurn_ToSource_UntilEndOfTurn", "AMER_DISINTEGRATING_PHYSICAL_CHALLENGE", "", "", 1.0, "Challenge_Infus", 0, 2000, "SkillCast");	//Cause target to apply Disintegrating status to caster on its turn.

QRY QRY_AMER_Source_Infusion_SkillCast_PerTarget((CHARACTERGUID)_Char, "Target_Challenge", (CHARACTERGUID)_Target, (REAL)_X, (REAL)_Y, (REAL)_Z, (INTEGER)_InfusCount)
AND
_InfusCount > 2
THEN
PROC_AMER_GEN_ApplyStatusUntilEndOfTurn(_Target, "AMER_DISINTEGRATING_PHYSICAL_CHALLENGE", _Char);	//Apply Disintegrating on the initial cast.
//Directly apply statusmod from _Target to _Char's Challenge-caster status, to mirror the Disintegrating-on-turn effect.
PROC_AMER_StatusMod_ExtendedStat_TryApplyModForStatus(_Char, _Target, "AMER_CHALLENGE_CASTER", "Status_OnTurn_ToSource_UntilEndOfTurn", "AMER_DISINTEGRATING_PHYSICAL_CHALLENGE", "", "", 1.0, "Challenge_Infus");	//Cause caster to apply Disintegrating status to target on its turn.


//REGION Basic Challenge logic.

PROC PROC_AMER_Spells_SkillPreCast_PerTarget((CHARACTERGUID)_Char, "Target_Challenge", (CHARACTERGUID)_Target, (REAL)_X, (REAL)_Y, (REAL)_Z, (INTEGER)_InfusCount, (STRING)_Type, (STRING)_Element)
THEN
ApplyStatus(_Target, "CHALLENGE", 18.0, 0, _Char);
PROC_AMER_Spells_Challenge_ApplyDamageBonuses(_Char, _Target, 0.5, 0.5);

PROC PROC_AMER_Spells_Challenge_ApplyDamageBonuses((CHARACTERGUID)_Char, (CHARACTERGUID)_Target, (REAL)_CharBonusMult, (REAL)_TargetBonusMult)
AND
CharacterGetHitpointsPercentage(_Char, _CharVit)
AND
CharacterGetHitpointsPercentage(_Target, _TargetVit)
AND
RealProduct(_TargetVit, _CharBonusMult, _CharBonus)	//_Char's bonus is based on _Target's vitality, not its own. Likewise for _Target.
AND
RealProduct(_CharVit, _TargetBonusMult, _TargetBonus)
THEN
PROC_AMER_TempStat_StatusMod_AddFlexStat(_Char, "AMER_CHALLENGE_CASTER", "Stat", "DAMAGEBOOST", _CharBonus, "Challenge_Caster", 0, 2000, "SkillCast");
PROC_AMER_TempStat_StatusMod_AddFlexStat(_Char, "CHALLENGE", "Stat", "DAMAGEBOOST", _TargetBonus, "Challenge_Target", 0);


PROC PROC_AMER_Spells_SkillCast_PerTarget((CHARACTERGUID)_Char, "Target_Challenge", (CHARACTERGUID)_Target, (REAL)_X, (REAL)_Y, (REAL)_Z, (INTEGER)_InfusCount, (STRING)_Type, (STRING)_Element)
THEN
ApplyStatus(_Char, "AMER_CHALLENGE_CASTER", -1.0, 0, _Char);
DB_AMER_Spells_Challenge_ActiveDuel(_Char, _Target, "CHALLENGE", "AMER_CHALLENGE_CASTER");
PROC_AMER_GEN_Goal_Activate("AMER_GLO_Spells_REMOTE_Challenge");

//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "AMER_GLO_Spells_Warfare"